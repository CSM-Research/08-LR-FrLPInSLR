@inproceedings{10.1145/3530019.3531336,
author = {Khan, Rafiq Ahmad and Khan, Siffat Ullah and Ilyas, Muhammad},
title = {Exploring Security Procedures in Secure Software Engineering: A Systematic Mapping Study},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3531336},
doi = {10.1145/3530019.3531336},
abstract = {Various new technologies have developed as software security solutions have become more critical. One of the essential parts of software quality is the product's security. Though providing examples covering all phases of secure software development is necessary, very few of these situations have been documented. More than a few approaches have been proposed and implemented to handle software security, but only a few of them provide valid evidence for developing secure software applications. This paper presents the results of a Systematic Mapping Study (SMS), which was carried out to determine the existence of software security metrics, tools, standards, and security-related research topics mainly discussed and addressed. A total of 116 studies were chosen for inclusion in this review. Selected studies led us to discover 55 Secure Software Engineering (SSE) metrics, 68 SSE tools, 33 SSE standards, and 12 SSE research topics that have been discussed and addressed. This effort will aid software development firms in better understanding existing security measures employed in creating secure software. It can also serve as a foundation for researchers to build and create new software security solutions and identify new research directions.},
booktitle = {Proceedings of the International Conference on Evaluation and Assessment in Software Engineering 2022},
pages = {433–439},
numpages = {7},
keywords = {Software Security, Systematic Mapping Study, Secure Software Development, Secure Software Engineering},
location = {Gothenburg, Sweden},
series = {EASE '22}
}

@article{10.1145/3485275,
author = {Watson, Cody and Cooper, Nathan and Palacio, David Nader and Moran, Kevin and Poshyvanyk, Denys},
title = {A Systematic Literature Review on the Use of Deep Learning in Software Engineering Research},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3485275},
doi = {10.1145/3485275},
abstract = {An increasingly popular set of techniques adopted by software engineering (SE) researchers to automate development tasks are those rooted in the concept of Deep Learning (DL). The popularity of such techniques largely stems from their automated feature engineering capabilities, which aid in modeling software artifacts. However, due to the rapid pace at which DL techniques have been adopted, it is difficult to distill the current successes, failures, and opportunities of the current research landscape. In an effort to bring clarity to this cross-cutting area of work, from its modern inception to the present, this article presents a systematic literature review of research at the intersection of SE &amp; DL. The review canvasses work appearing in the most prominent SE and DL conferences and journals and spans 128 papers across 23&nbsp;unique SE tasks. We center our analysis around the components of learning, a set of principles that governs the application of machine learning techniques (ML) to a given problem domain, discussing several aspects of the surveyed work at a granular level. The end result of our analysis is a research roadmap that both delineates the foundations of DL techniques applied to SE research and highlights likely areas of fertile exploration for the future.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {mar},
articleno = {32},
numpages = {58},
keywords = {machine learning, literature review, software engineering, neural networks, Deep learning}
}

@inproceedings{10.1145/3463274.3463328,
author = {Obaidi, Martin and Kl\"{u}nder, Jil},
title = {Development and Application of Sentiment Analysis Tools in Software Engineering: A Systematic Literature Review},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463328},
doi = {10.1145/3463274.3463328},
abstract = {Software development is a collaborative task and, hence, involves different persons. Research has shown the relevance of social aspects in the development team for a successful and satisfying project closure. Especially the mood of a team has been proven to be of particular importance. Thus, project managers or project leaders want to be aware of situations in which negative mood is present to allow for interventions. So-called sentiment analysis tools offer a way to determine the mood based on text-based communication. In this paper, we present the results of a systematic literature review of sentiment analysis tools developed for or applied in the context of software engineering. Our results summarize insights from 80 papers with respect to (1) the application domain, (2) the purpose, (3) the used data sets, (4) the approaches for developing sentiment analysis tools and (5) the difficulties researchers face when applying sentiment analysis in the context of software projects. According to our results, sentiment analysis is frequently applied to open-source software projects, and most tools are based on support-vector machines. Despite the frequent use of sentiment analysis in software engineering, there are open issues, e.g., regarding the identification of irony or sarcasm, pointing to future research directions.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {80–89},
numpages = {10},
keywords = {Machine Learning, Systematic Literature Review, Social Software Engineering, Sentiment Analysis},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@article{10.1145/3450288,
author = {Lo, Sin Kit and Lu, Qinghua and Wang, Chen and Paik, Hye-Young and Zhu, Liming},
title = {A Systematic Literature Review on Federated Machine Learning: From a Software Engineering Perspective},
year = {2021},
issue_date = {June 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3450288},
doi = {10.1145/3450288},
abstract = {Federated learning is an emerging machine learning paradigm where clients train models locally and formulate a global model based on the local model updates. To identify the state-of-the-art in federated learning and explore how to develop federated learning systems, we perform a systematic literature review from a software engineering perspective, based on 231 primary studies. Our data synthesis covers the lifecycle of federated learning system development that includes background understanding, requirement analysis, architecture design, implementation, and evaluation. We highlight and summarise the findings from the results and identify future trends to encourage researchers to advance their current work.},
journal = {ACM Comput. Surv.},
month = {may},
articleno = {95},
numpages = {39},
keywords = {distributed learning, privacy, edge learning, Federated learning, systematic literature review, software engineering}
}

@inproceedings{10.1145/3412841.3442029,
author = {Ferreira, Fabio and Silva, Luciana Lourdes and Valente, Marco Tulio},
title = {Software Engineering Meets Deep Learning: A Mapping Study},
year = {2021},
isbn = {9781450381048},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3412841.3442029},
doi = {10.1145/3412841.3442029},
abstract = {Deep Learning (DL) is being used nowadays in many traditional Software Engineering (SE) problems and tasks. However, since the renaissance of DL techniques is still very recent, we lack works that summarize and condense the most recent and relevant research conducted at the intersection of DL and SE. Therefore, in this paper, we describe the first results of a mapping study covering 81 papers about DL &amp; SE. Our results confirm that DL is gaining momentum among SE researchers over the years and that the top-3 research problems tackled by the analyzed papers are documentation, defect prediction, and testing.},
booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing},
pages = {1542–1549},
numpages = {8},
keywords = {deep learning, software engineering},
location = {Virtual Event, Republic of Korea},
series = {SAC '21}
}

@inproceedings{10.1145/3535511.3535531,
author = {Campos, Thiago Prado de and Damasceno, Eduardo Filgueiras and Valentim, Natasha Malveira Costa},
title = {Proposal and Evaluation of a Collaborative IS to Support Systematic Reviews and Mapping Studies},
year = {2022},
isbn = {9781450396981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3535511.3535531},
doi = {10.1145/3535511.3535531},
abstract = {Context: Systematic Literature Review (SLR) or Systematic Mapping Study (SMS) are a process in which publications dataset is systematically analyzed to cover a research field. These processes involve multiple investigators collaborating to produce more improved work and often use automated tools to facilitate their work. Problem: However, not all tools offer proper support to collaborative SLR or SMS. That is, missing a tool to support the study selection process, allowing the collaboration between researchers by applying individual criteria and collective decision, supported by agreement or discussion and consensus. Solution: We developed the Porifera tool to fill this lack. IS Theory: Technology Acceptance Model (TAM) and a Grounded Theory’s phase subset were used to evaluate Porifera’s tool quality. Methodology: Undergraduate and postgraduate students enrolled in the Experimental Software Engineering Research,used the Porifera tool and answered a post-used questionnaire with TAM’s sentences and other open questions. Then, a quantitative and qualitative analysis was performed. Summary of Results: It was possible to see high perceived usefulness and ease of use for Porifera. Too it noted the effectiveness of resources to support the collaborative activity and its contribution to learning and performing a collaborative SLR or SMS. The evaluation showed points to improve the Porifera’s interface. Contribution and Impact in the IS area: The Porifera is an IS for data, information, and knowledge research management because it gathers publications records and allows it will be interpreted and processed, making possible decisions making by researchers. The Porifera also allows performing an SLR or SMS with mobility, knowledge sharing, flexibility, and integration between people and technology.},
booktitle = {XVIII Brazilian Symposium on Information Systems},
articleno = {20},
numpages = {8},
keywords = {Systematic Mapping Study, software evaluation, Systematic Literature Review, user feedback, collaborative system, SLR tool},
location = {Curitiba, Brazil},
series = {SBSI}
}

@inproceedings{10.1145/3483899.3483909,
author = {Furtado, Viviane and OliveiraJr, Edson and Kalinowski, Marcos},
title = {Guidelines for Promoting Software Product Line Experiments},
year = {2021},
isbn = {9781450384193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3483899.3483909},
doi = {10.1145/3483899.3483909},
abstract = {The importance of experimentation for Software Engineering research has been notably established in the last years. The software engineering community has discussed how to proper report and evaluate experiments using different approaches, such as quality criteria, scales, and checklists. Nevertheless, there are no guidelines to support researchers and practitioners active in straightforward software engineering research areas, as in Software Product Lines (SPL), at conducting experiments. We hypothesize that experimentation guidelines may aid such a specific area by providing advice and actual excerpts reflecting good practices of SPL experimentation, thus experimentally evolving this area. Therefore, the goal of this paper is to provide guidelines for properly reporting and promoting SPL experiments. We defined such guidelines based on well-known software engineering experiment reports, quality evaluation checklists, and data extracted from 211 SPL experiments identified in a systematic mapping study. We evaluated the guidelines with a qualitative study with SPL and experimentation experts applying open and axial coding procedures. The evaluation enabled us to improve the guidelines. The resulting guidelines contain specific advice to researchers active in SPL and provide examples taken from published SPL experiments. The experts’ positive points indicate that the proposed guidelines can aid SPL researchers and practitioners. Sharing the resulting guidelines could support conducting SPL experiments and allow further area evolution based on prospective experiment replications and reproductions from well-designed and reported experiments.},
booktitle = {15th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {31–40},
numpages = {10},
keywords = {Qualitative Study, Experiment Reporting and Sharing, SPL Experiments, Guidelines},
location = {Joinville, Brazil},
series = {SBCARS '21}
}

@inproceedings{10.1145/3474624.3474649,
author = {Falc\~{a}o, Larissa and Soares, Sergio},
title = {Human-Oriented Software Engineering Experiments: The Large Gap in Experiment Reports},
year = {2021},
isbn = {9781450390613},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3474624.3474649},
doi = {10.1145/3474624.3474649},
abstract = {Context: The lack of information in experiment reports impairs external replications and decreases experiment quality and reliability, causing a lack of knowledge dissemination and making it impossible to confirm the results, despite the existence of well-known guidelines for planning, conducting, and reporting experiments. Objective: Provide an in-depth study on how information from human-oriented controlled experiments in software engineering is reported after the emergence of supporting guidelines. Method: A systematic mapping study was conducted in the main empirical software engineering and software engineering venues, considering the period following the supporting guidelines publication. Results: We analyzed 412 articles from three conferences and three journals reporting experiments where we did not find crucial information about the experiments in most of them. Examples of such information are participant reward, target population, hypothesis, and conclusion and construct validity. Conclusion: There is a gap between the information the guidelines suggest reporting and what is reported. From 27 elements that should be on the reports, according to the guidelines, 65% of the analyzed articles failed to report at least 13 (almost half). Such finding opposes the natural intuition that with the appearance and maturation of guidelines, studies’ reports would increasingly comply with them over the years. As a consequence, a flawed report may raise doubts about the quality and validity of the study.},
booktitle = {Proceedings of the XXXV Brazilian Symposium on Software Engineering},
pages = {330–334},
numpages = {5},
keywords = {Controlled Experiments, Empirical Software Engineering, Experiment Report, Systematic Mapping Study},
location = {Joinville, Brazil},
series = {SBES '21}
}

@inproceedings{10.1109/ICSE-Companion52605.2021.00137,
author = {Ferrari, Alessio and Zhao, Liping and Alhoshan, Waad},
title = {NLP for Requirements Engineering: Tasks, Techniques, Tools, and Technologies},
year = {2021},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-Companion52605.2021.00137},
doi = {10.1109/ICSE-Companion52605.2021.00137},
abstract = {Requirements engineering (RE) is one of the most natural language-intensive fields within the software engineering area. Therefore, several works have been developed across the years to automate the analysis of natural language artifacts that are relevant for RE, including requirements documents, but also app reviews, privacy policies, and social media content related to software products. Furthermore, the recent diffusion of game-changing natural language processing (NLP) techniques and platforms has also boosted the interest of RE researchers. However, a reference framework to provide a holistic understanding of the field of NLP for RE is currently missing. Based on the results of a recent systematic mapping study, and stemming from a previous ICSE tutorial by one of the authors, this technical briefing gives an overview of NLP for RE tasks, available techniques, supporting tools and NLP technologies. It is oriented to both researchers and practitioners, and will gently guide the audience towards a clearer view of how NLP can empower RE, providing pointers to representative works and specialised tools.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Companion Proceedings},
pages = {322–323},
numpages = {2},
location = {Virtual Event, Spain},
series = {ICSE '21}
}

@inproceedings{10.1145/3555228.3555236,
author = {Karita, Leila and Mour\~{a}o, Brunna Caroline and Machado, Ivan},
title = {Towards a Common Understanding of Sustainable Software Development},
year = {2022},
isbn = {9781450397353},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3555228.3555236},
doi = {10.1145/3555228.3555236},
abstract = {The underlying principles of Sustainable Software Engineering are a core set of competencies Software Engineers need for defining, building, and running sustainable software applications. However, despite its importance, recently published studies have shown that Software Engineers have not reached a common and clear understanding of Sustainable Software Development (SSD). Consequently, it might be challenging to understand the value of the principles behind sustainability and how Software Engineers should apply them in practice. Therefore, the first step is to promote a field characterization to mitigate such effects to bridge such a gap. This paper reports on qualitative data analysis to leverage the sustainability principles through the support of the Grounded Theory method. We conducted this study using unstructured data retrieved from a systematic mapping study on sustainable software engineering and a survey applied in the software industry. To achieve the principles, we considered five critical dimensions: economic, social, individual, environmental, and technical. The key results are: (i) technical, environmental, and social concerns are present in all software development life-cycle (SDLC) phases; (ii) software engineers should consider sustainability requirements in the early SDLC phases; (iii) there is a need for stakeholder engagement focused on sustainability; (iv) software quality requirements support the development of sustainable software; and (v) sustainable concerns could generate trade-offs in the project. The yielded results might trigger further discussions around the SSD’s underlying principles and concepts and serve as a basis for the research community to identify models, techniques, and tools to support SSD.},
booktitle = {Proceedings of the XXXVI Brazilian Symposium on Software Engineering},
pages = {269–278},
numpages = {10},
keywords = {Grounded Theory, Sustainable Software Engineering, Empirical Software Engineering},
location = {Virtual Event, Brazil},
series = {SBES '22}
}

@article{10.1145/3507903,
author = {J\'{u}nior, Misael C. and Amalfitano, Domenico and Garc\'{e}s, Lina and Fasolino, Anna Rita and Andrade, Stev\~{a}o A. and Delamaro, M\'{a}rcio},
title = {Dynamic Testing Techniques of Non-Functional Requirements in Mobile Apps: A Systematic Mapping Study},
year = {2022},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {10s},
issn = {0360-0300},
url = {https://doi.org/10.1145/3507903},
doi = {10.1145/3507903},
abstract = {Context: The mobile app market is continually growing offering solutions to almost all aspects of people’s lives, e.g., healthcare, business, entertainment, as well as the stakeholders’ demand for apps that are more secure, portable, easy to use, among other non-functional requirements (NFRs). Therefore, manufacturers should guarantee that their mobile apps achieve high-quality levels. A good strategy is to include software testing and quality assurance activities during the whole life cycle of such solutions.Problem: Systematically warranting NFRs is not an easy task for any software product. Software engineers must take important decisions before adopting testing techniques and automation tools to support such endeavors.Proposal: To provide to the software engineers with a broad overview of existing dynamic techniques and automation tools for testing mobile apps regarding NFRs.Methods: We planned and conducted a Systematic Mapping Study (SMS) following well-established guidelines for executing secondary studies in software engineering.Results: We found 56 primary studies and characterized their contributions based on testing strategies, testing approaches, explored mobile platforms, and the proposed tools.Conclusions: The characterization allowed us to identify and discuss important trends and opportunities that can benefit both academics and practitioners.},
journal = {ACM Comput. Surv.},
month = {sep},
articleno = {214},
numpages = {38},
keywords = {mobile apps, non-functional requirements, Software testing, systematic mapping, dynamic testing techniques}
}

@inproceedings{10.1145/3530019.3531336,
author = {Khan, Rafiq Ahmad and Khan, Siffat Ullah and Ilyas, Muhammad},
title = {Exploring Security Procedures in Secure Software Engineering: A Systematic Mapping Study},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3531336},
doi = {10.1145/3530019.3531336},
abstract = {Various new technologies have developed as software security solutions have become more critical. One of the essential parts of software quality is the product's security. Though providing examples covering all phases of secure software development is necessary, very few of these situations have been documented. More than a few approaches have been proposed and implemented to handle software security, but only a few of them provide valid evidence for developing secure software applications. This paper presents the results of a Systematic Mapping Study (SMS), which was carried out to determine the existence of software security metrics, tools, standards, and security-related research topics mainly discussed and addressed. A total of 116 studies were chosen for inclusion in this review. Selected studies led us to discover 55 Secure Software Engineering (SSE) metrics, 68 SSE tools, 33 SSE standards, and 12 SSE research topics that have been discussed and addressed. This effort will aid software development firms in better understanding existing security measures employed in creating secure software. It can also serve as a foundation for researchers to build and create new software security solutions and identify new research directions.},
booktitle = {Proceedings of the International Conference on Evaluation and Assessment in Software Engineering 2022},
pages = {433–439},
numpages = {7},
keywords = {Software Security, Systematic Mapping Study, Secure Software Development, Secure Software Engineering},
location = {Gothenburg, Sweden},
series = {EASE '22}
}

@article{10.1145/3487043,
author = {Mart\'{\i}nez-Fern\'{a}ndez, Silverio and Bogner, Justus and Franch, Xavier and Oriol, Marc and Siebert, Julien and Trendowicz, Adam and Vollmer, Anna Maria and Wagner, Stefan},
title = {Software Engineering for AI-Based Systems: A Survey},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3487043},
doi = {10.1145/3487043},
abstract = {AI-based systems are software systems with functionalities enabled by at least one AI component (e.g., for image-, speech-recognition, and autonomous driving). AI-based systems are becoming pervasive in society due to advances in AI. However, there is limited synthesized knowledge on Software Engineering (SE) approaches for building, operating, and maintaining AI-based systems. To collect and analyze state-of-the-art knowledge about SE for AI-based systems, we conducted a systematic mapping study. We considered 248 studies published between January 2010 and March 2020. SE for AI-based systems is an emerging research area, where more than 2/3 of the studies have been published since 2018. The most studied properties of AI-based systems are dependability and safety. We identified multiple SE approaches for AI-based systems, which we classified according to the SWEBOK areas. Studies related to software testing and software quality are very prevalent, while areas like software maintenance seem neglected. Data-related issues are the most recurrent challenges. Our results are valuable for: researchers, to quickly understand the state-of-the-art and learn which topics need more research; practitioners, to learn about the approaches and challenges that SE entails for AI-based systems; and, educators, to bridge the gap among SE and AI in their curricula.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {apr},
articleno = {37e},
numpages = {59},
keywords = {systematic mapping study, AI-based systems, artificial intelligence, Software engineering}
}

@inproceedings{10.1145/3530019.3530020,
author = {Williams, Ashley and Buchan, Jim},
title = {Using the Case Survey Methodology for Finding High-Quality Grey Literature in Software Engineering},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3530020},
doi = {10.1145/3530019.3530020},
abstract = {Background: Mining online accounts of practitioner experience can provide new evidence for software engineering researchers. However, we need methods for assessing quality at vast scale. Objectives: We investigate the challenge of finding high-quality grey literature, defining high-quality in terms of a document’s relevance to the consumer and its credibility. Method: Building on previous research, we use a version of the case survey methodology for automating the identification and assessment of high-quality grey literature. Results: We develop a model of credibility assessment within software engineering research and demonstrate our case survey methodology and credibility assessment model in practice. We use it to conduct a grey literature review of High Performing Teams (HPT). Conclusions: The paper provides a foundation for future research on automated quality and credibility assessment. Adoption of the tools and methodology presented can help researchers effectively search for and select higher-quality blog-like content.},
booktitle = {Proceedings of the International Conference on Evaluation and Assessment in Software Engineering 2022},
pages = {1–9},
numpages = {9},
keywords = {grey literature, software practice, credibility assessment, data quality, case survey methodology},
location = {Gothenburg, Sweden},
series = {EASE '22}
}

@article{10.1145/3450288,
author = {Lo, Sin Kit and Lu, Qinghua and Wang, Chen and Paik, Hye-Young and Zhu, Liming},
title = {A Systematic Literature Review on Federated Machine Learning: From a Software Engineering Perspective},
year = {2021},
issue_date = {June 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3450288},
doi = {10.1145/3450288},
abstract = {Federated learning is an emerging machine learning paradigm where clients train models locally and formulate a global model based on the local model updates. To identify the state-of-the-art in federated learning and explore how to develop federated learning systems, we perform a systematic literature review from a software engineering perspective, based on 231 primary studies. Our data synthesis covers the lifecycle of federated learning system development that includes background understanding, requirement analysis, architecture design, implementation, and evaluation. We highlight and summarise the findings from the results and identify future trends to encourage researchers to advance their current work.},
journal = {ACM Comput. Surv.},
month = {may},
articleno = {95},
numpages = {39},
keywords = {distributed learning, privacy, edge learning, Federated learning, systematic literature review, software engineering}
}

@inproceedings{10.1145/3463274.3463357,
author = {Kaplan, Angelika and Walter, Maximilian and Heinrich, Robert},
title = {A Classification for Managing Software Engineering Knowledge},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463357},
doi = {10.1145/3463274.3463357},
abstract = {This taxonomy paper presents a novel way of knowledge engineering in the software engineering research community. Till now, research papers are organized digitally as documents, mostly in PDF files. Not much effort is spent on effective knowledge classification, retrieval, storage, and representation. In contrast to the current paper-based approach for knowledge documentation, we present a statement-based approach, where each statement is linked to arguments and data of its evidence as well as to related statements. We argue that in this way, knowledge will be easier to retrieve, compare, and evaluate in contrast to current paper-based knowledge engineering in scientific search engines and digital libraries. Therefore, we present as a first step a novel multi-dimensional classification for statements in software engineering research. Statements are classified according to their research object, their kind (e.g., relevance), and their underlying evidence. This classification is validated and extended with a first systematic literature review. Additionally, we provide an example for illustration purpose.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {340–346},
numpages = {7},
keywords = {meta-research in software engineering, knowledge management system, validation, classification},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@article{10.1145/3442694,
author = {Bluemke, Ilona and Malanowska, Agnieszka},
title = {Software Testing Effort Estimation and Related Problems: A Systematic Literature Review},
year = {2021},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {3},
issn = {0360-0300},
url = {https://doi.org/10.1145/3442694},
doi = {10.1145/3442694},
abstract = {Although testing effort estimation is a very important task in software project management, it is rarely described in the literature. There are many difficulties in finding any useful methods or tools for this purpose. Solutions to many other problems related to testing effort calculation are published much more often. There is also no research focusing on both testing effort estimation and all related areas of software engineering. To fill this gap, we performed a systematic literature review on both questions. Although our primary objective was to find some tools or implementable metods for test effort estimation, we have quickly discovered many other interesting topics related to the main one. The main contribution of this work is the presentation of the testing effort estimation task in a very wide context, indicating the relations with other research fields. This systematic literature review presents a detailed overview of testing effort estimation task, including challenges and approaches to automating it and the solutions proposed in the literature. It also exhaustively investigates related research topics, classifying publications that can be found in connection to the testing effort according to seven criteria formulated on the basis of our research questions. We present here both synthesis of our finding and the deep analysis of the stated research problems.},
journal = {ACM Comput. Surv.},
month = {apr},
articleno = {53},
numpages = {38},
keywords = {systematic literature review, Testing effort, testing effort estimation-related problems, testing effort estimation}
}

@article{10.1145/3468504,
author = {Sundelin, Anders and Gonzalez-huerta, Javier and Wnuk, Krzysztof and Gorschek, Tony},
title = {Towards an Anatomy of Software Craftsmanship},
year = {2021},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {1},
issn = {1049-331X},
url = {https://doi.org/10.1145/3468504},
doi = {10.1145/3468504},
abstract = {Context: The concept of software craftsmanship has early roots in computing, and in 2009, the Manifesto for Software Craftsmanship was formulated as a reaction to how the Agile methods were practiced and taught. But software craftsmanship has seldom been studied from a software engineering perspective.Objective: The objective of this article is to systematize an anatomy of software craftsmanship through literature studies and a longitudinal case study.Method: We performed a snowballing literature review based on an initial set of nine papers, resulting in&nbsp;18 papers and 11 books. We also performed a case study following seven years of software development of a product for the financial market, eliciting qualitative, and quantitative results. We used thematic coding to synthesize the results into categories.Results: The resulting anatomy is centered around four themes, containing 17 principles and 47 hierarchical practices connected to the principles. We present the identified practices based on the experiences gathered from the case study, triangulating with the literature results.Conclusion: We provide our systematically derived anatomy of software craftsmanship with the goal of inspiring more research into the principles and practices of software craftsmanship and how these relate to other principles within software engineering in general.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {sep},
articleno = {6},
numpages = {49},
keywords = {principles of software development, deliberate practice, Software craftsmanship}
}

@inproceedings{10.1145/3493244.3493249,
author = {Carvalho, Luiz Paulo and Suzano, Jos\'{e} Antonio and Anastassiu, Monica and Santoro, Fl\'{a}via Maria and Oliveira, Jonice and Gon\c{c}alves, Jo\~{a}o Carlos},
title = {Ethics: What is the Research Scenario in the Brazilian Symposium SBQS?},
year = {2021},
isbn = {9781450395533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3493244.3493249},
doi = {10.1145/3493244.3493249},
abstract = {Many practitioners and researchers still consider software as program code, composed by algorithms and associated documentation, written in a programming language, and finally compiled or interpreted in a computational environment. The different facets of the software question, explored in interdisciplinary fields such as Digital Humanities, seem largely unexplored in Software Engineering and other traditional Computing fields of research. This paper aims to present an overview of ethical aspects through the publications of the Brazilian Symposium on Software Quality (SBQS). We followed a Systematic Literature Review (SLR) approach and presented quantitative and qualitative, and in-depth results, analyzing fifteen editions of the SBQS between 2006 and 2020. We adopted the concept of Ethics in a primary way, through searches for terms directly associated, and secondary, by terms such as Informed Consent, aligned with the definitions and concepts of Computational Ethics combined with episteme and good practices in Software Engineering. The results pointed to the minor occurrence of ethical aspects in SBQS publications, growing timidly over the years. We conclude that there is broad space to explore the theme of Computational Ethics combined with Software Quality.},
booktitle = {XX Brazilian Symposium on Software Quality},
articleno = {5},
numpages = {10},
keywords = {SBQS, Ethics, Systematic Literature Review, Software Quality, Software Engineering},
location = {Virtual Event, Brazil},
series = {SBQS '21}
}

@inproceedings{10.1145/3475716.3484189,
author = {Sultana, Sayma and Sarker, Jaydeb and Bosu, Amiangshu},
title = {A Rubric to Identify Misogynistic and Sexist Texts from Software Developer Communications},
year = {2021},
isbn = {9781450386654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475716.3484189},
doi = {10.1145/3475716.3484189},
abstract = {Background: As contemporary software development organizations are dominated by males, occurrences of misogynistic and sexist remarks are abundant in many communities. Such remarks are barriers to promoting diversity and inclusion in the software engineering (SE) domain.Aims: This study aims to develop a rubric to identify misogynistic remarks and sexist jokes specifically from software developer communications.Method: We have followed the systematic literature review protocol to identify 10 primary studies that have characterized misogynistic and sexist texts in various domains.Results: Based on our syntheses of the primary studies, we have developed a rubric to manually identity various categories of misogynistic or sexist remarks. We have also provided SE domain specific examples of those categories.Conclusions: Our annotation guideline will pave the path towards building automated misogynistic text classifier for the SE domain.},
booktitle = {Proceedings of the 15th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
articleno = {27},
numpages = {6},
keywords = {sexist joke, misogynistic text, software developer},
location = {Bari, Italy},
series = {ESEM '21}
}

@inproceedings{10.1145/3463274.3463328,
author = {Obaidi, Martin and Kl\"{u}nder, Jil},
title = {Development and Application of Sentiment Analysis Tools in Software Engineering: A Systematic Literature Review},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463328},
doi = {10.1145/3463274.3463328},
abstract = {Software development is a collaborative task and, hence, involves different persons. Research has shown the relevance of social aspects in the development team for a successful and satisfying project closure. Especially the mood of a team has been proven to be of particular importance. Thus, project managers or project leaders want to be aware of situations in which negative mood is present to allow for interventions. So-called sentiment analysis tools offer a way to determine the mood based on text-based communication. In this paper, we present the results of a systematic literature review of sentiment analysis tools developed for or applied in the context of software engineering. Our results summarize insights from 80 papers with respect to (1) the application domain, (2) the purpose, (3) the used data sets, (4) the approaches for developing sentiment analysis tools and (5) the difficulties researchers face when applying sentiment analysis in the context of software projects. According to our results, sentiment analysis is frequently applied to open-source software projects, and most tools are based on support-vector machines. Despite the frequent use of sentiment analysis in software engineering, there are open issues, e.g., regarding the identification of irony or sarcasm, pointing to future research directions.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {80–89},
numpages = {10},
keywords = {Systematic Literature Review, Sentiment Analysis, Machine Learning, Social Software Engineering},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@inproceedings{10.1145/3475716.3484273,
author = {Lenarduzzi, Valentina and Dieste, Oscar and Fucci, Davide and Vegas, Sira},
title = {Towards a Methodology for Participant Selection in Software Engineering Experiments: A Vision of the Future},
year = {2021},
isbn = {9781450386654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475716.3484273},
doi = {10.1145/3475716.3484273},
abstract = {Background. Software Engineering (SE) researchers extensively perform experiments with human subjects. Well-defined samples are required to ensure external validity. Samples are selected purposely or by convenience, limiting the generalizability of results. Objective. We aim to depict the current status of participants selection in empirical SE, identifying the main threats and how they are mitigated. We draft a robust approach to participants' selection. Method. We reviewed existing participants' selection guidelines in SE, and performed a preliminary literature review to find out how participants' selection is conducted in SE in practice. Results. We outline a new selection methodology, by 1) defining the characteristics of the desired population, 2) locating possible sources of sampling available for researchers, and 3) identifying and reducing the "distance" between the selected sample and its corresponding population. Conclusion. We propose a roadmap to develop and empirically validate the selection methodology.},
booktitle = {Proceedings of the 15th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
articleno = {35},
numpages = {6},
keywords = {Controlled Experiment, Participant Selection, Generalizability, Empirical Software Engineering, Threats to Validity},
location = {Bari, Italy},
series = {ESEM '21}
}

@inproceedings{10.1145/3412841.3442029,
author = {Ferreira, Fabio and Silva, Luciana Lourdes and Valente, Marco Tulio},
title = {Software Engineering Meets Deep Learning: A Mapping Study},
year = {2021},
isbn = {9781450381048},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3412841.3442029},
doi = {10.1145/3412841.3442029},
abstract = {Deep Learning (DL) is being used nowadays in many traditional Software Engineering (SE) problems and tasks. However, since the renaissance of DL techniques is still very recent, we lack works that summarize and condense the most recent and relevant research conducted at the intersection of DL and SE. Therefore, in this paper, we describe the first results of a mapping study covering 81 papers about DL &amp; SE. Our results confirm that DL is gaining momentum among SE researchers over the years and that the top-3 research problems tackled by the analyzed papers are documentation, defect prediction, and testing.},
booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing},
pages = {1542–1549},
numpages = {8},
keywords = {deep learning, software engineering},
location = {Virtual Event, Republic of Korea},
series = {SAC '21}
}

@inproceedings{10.1145/3474624.3474625,
author = {Dutra, Eliezer and Diirr, Bruna and Santos, Gleison},
title = {Human Factors and Their Influence on Software Development Teams - A Tertiary Study},
year = {2021},
isbn = {9781450390613},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3474624.3474625},
doi = {10.1145/3474624.3474625},
abstract = {Background: Software organizations increasingly need developers with high skills for social interactions. Managers, leaders, and academics need to know the human factors influencing the individuals, the development team, and the software project activities. Despite the increasing number of secondary studies about human factors in Software Engineering (SE) and in Agile Software Development (ASD), there is no study synthesizing which human factors influence software development without a specific perspective from SE or human factor thematic. Objective: We aim to summarise human factors and their influence on SE development teams and ASD teams. Method: We executed a tertiary study. We used thematic analysis to examine the resulting data. Results: We found 29 systematic literature reviews and systematic mapping studies addressing the human perspective in SE teams. We identified 101 human factors and 79 influences grouped in 4 categories (Team member, Team, Project, and Organization). Also, we identified 71 human factors and 60 influences on ASD. The most investigated human factors are Communication, Collaboration, Knowledge, and Motivation. Conclusions: The identified human factors and their influences can be considered most significant by software organizations, researchers, and academics in SE practices. Based on our results, practitioners might propose activities that enhance human capital behaviors that influence individual motivation, agile mindset, team climate, software quality, or agile transition in traditional organizations.},
booktitle = {Proceedings of the XXXV Brazilian Symposium on Software Engineering},
pages = {442–451},
numpages = {10},
keywords = {Human Factor Influence, Software Engineering, Tertiary study},
location = {Joinville, Brazil},
series = {SBES '21}
}

@inproceedings{10.1145/3470482.3479616,
author = {Krause, Maico and Neto, Macilon Ara\'{u}jo Costa},
title = {Systematic Mapping of the Literature on Mobile Apps for People with Autistic Spectrum Disorder},
year = {2021},
isbn = {9781450386098},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3470482.3479616},
doi = {10.1145/3470482.3479616},
abstract = {The advancement of mobile technologies combined with assistive technologies can provide autonomy to people with different types of disabilities, including those with Autistic Spectrum Disorder (ASD). Technologies, such as those found in mobile devices, are very attractive to people with ASD and can be used as a valuable educational tool for these individuals. The aim of this study was to learn about how mobile apps aimed at people with ASD are developed and evaluated, carried out through a systematic mapping of applications aimed at people with ASD, in order to better understand their foundations, motivations, evaluation mode, resources and user profile. The results indicated that the main procedures used to support the applications for people with ASD are the questionnaires to identify the ASD, such as the CHAT and AQ-10, and the ABA intervention, and that these applications, mostly, seek to identify the ASD in a practical way and at a low cost. Most of the apps were evaluated by usability testing and through indirect observation through the app's logs. The most used hardware and software resources are the mobile device camera and convolutional neural networks (CNN), respectively, with most applications aimed at children and the most common software engineering methodologies were requirements analysis and prototyping.},
booktitle = {Proceedings of the Brazilian Symposium on Multimedia and the Web},
pages = {45–52},
numpages = {8},
keywords = {Apps, Autistic Spectrum Disorder, Systematic Mapping, Mobile Devices},
location = {Belo Horizonte, Minas Gerais, Brazil},
series = {WebMedia '21}
}

@inproceedings{10.1145/3461001.3473062,
author = {Chac\'{o}n-Luna, Ana Eva and Fern\'{a}ndez, Antonio Manuel Guti\'{e}rrez and Galindo, Jos\'{e} A. and Benavides, David},
title = {Empirical Software Product Line Engineering: A Systematic Literature Review. an IST Journal Publication},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473062},
doi = {10.1145/3461001.3473062},
abstract = {The adoption of Software Product Line Engineering (SPLE) is usually only based on its theoretical benefits instead of empirical evidences. In fact, there is no work that synthesizes the empirical studies on SPLE. This makes it difficult for researchers to base their contributions on previous works validated with an empirical strategy. The objective of this work is to discover and summarize the studies that have used empirical evidences in SPLE limited to those ones with the intervention of humans. This will allow evaluating the quality and knowing the scope of these studies over time. Doing so, research opportunities can arise. Analyzing the authors and institutions that investigate SPLE supported by empirical studies will also help to know which institutions have knowledge of the subject, leading to detect and encourage collaboration among researches. A systematic literature review was conducted with the focus on those studies in which there is human intervention and were published between 2000 and 2018 (the systematic literature review was developed in 2019). We considered peer-reviewed papers from journals and top software engineering conferences. Out of a total of 1880 studies in the initial set, a total of 62 primary studies were selected after applying a series of inclusion and exclusion criteria. We found that, approximately 56% of the studies used the empirical case study strategy while the rest used experimental strategies. Around 86% of the case studies were performed in an industrial environment showing the penetration of SPLE in industry while 81% of the experiments were conducted in an academic environment. Around 95.16% of the studies address aspects related to domain engineering while application engineering received less attention. Most of the experiments and case study evaluated showed an acceptable level of quality. The first study found dates from 2005 and since 2008, the interest in the empirical SPLE has increased.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {113},
numpages = {1},
keywords = {empirical strategies, systematic literature review, software product lines, experiment, case study},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3510003.3510152,
author = {Hu, Xing and Xia, Xin and Lo, David and Wan, Zhiyuan and Chen, Qiuyuan and Zimmermann, Thomas},
title = {Practitioners' Expectations on Automated Code Comment Generation},
year = {2022},
isbn = {9781450392211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510003.3510152},
doi = {10.1145/3510003.3510152},
abstract = {Good comments are invaluable assets to software projects, as they help developers understand and maintain projects. However, due to some poor commenting practices, comments are often missing or inconsistent with the source code. Software engineering practitioners often spend a significant amount of time and effort reading and understanding programs without or with poor comments. To counter this, researchers have proposed various techniques to automatically generate code comments in recent years, which can not only save developers time writing comments but also help them better understand existing software projects. However, it is unclear whether these techniques can alleviate comment issues and whether practitioners appreciate this line of research. To fill this gap, we performed an empirical study by interviewing and surveying practitioners about their expectations of research in code comment generation. We then compared what practitioners need and the current state-of-the-art research by performing a literature review of papers on code comment generation techniques published in the premier publication venues from 2010 to 2020. From this comparison, we highlighted the directions where researchers need to put effort to develop comment generation techniques that matter to practitioners.},
booktitle = {Proceedings of the 44th International Conference on Software Engineering},
pages = {1693–1705},
numpages = {13},
keywords = {empirical study, code comment generation, practitioners' expectations},
location = {Pittsburgh, Pennsylvania},
series = {ICSE '22}
}

@article{10.1145/3490388,
author = {Lin, Bin and Cassee, Nathan and Serebrenik, Alexander and Bavota, Gabriele and Novielli, Nicole and Lanza, Michele},
title = {Opinion Mining for Software Development: A Systematic Literature Review},
year = {2022},
issue_date = {July 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {3},
issn = {1049-331X},
url = {https://doi.org/10.1145/3490388},
doi = {10.1145/3490388},
abstract = {Opinion mining, sometimes referred to as sentiment analysis, has gained increasing attention in software engineering (SE) studies. SE researchers have applied opinion mining techniques in various contexts, such as identifying developers’ emotions expressed in code comments and extracting users’ critics toward mobile apps. Given the large amount of relevant studies available, it can take considerable time for researchers and developers to figure out which approaches they can adopt in their own studies and what perils these approaches entail.We conducted a systematic literature review involving 185 papers. More specifically, we present (1) well-defined categories of opinion mining-related software development activities, (2) available opinion mining approaches, whether they are evaluated when adopted in other studies, and how their performance is compared, (3) available datasets for performance evaluation and tool customization, and (4) concerns or limitations SE researchers might need to take into account when applying/customizing these opinion mining techniques. The results of our study serve as references to choose suitable opinion mining tools for software development activities and provide critical insights for the further development of opinion mining techniques in the SE domain.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {mar},
articleno = {38},
numpages = {41},
keywords = {sentiment analysis, software engineering, Opinion mining}
}

@article{10.1145/3485275,
author = {Watson, Cody and Cooper, Nathan and Palacio, David Nader and Moran, Kevin and Poshyvanyk, Denys},
title = {A Systematic Literature Review on the Use of Deep Learning in Software Engineering Research},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3485275},
doi = {10.1145/3485275},
abstract = {An increasingly popular set of techniques adopted by software engineering (SE) researchers to automate development tasks are those rooted in the concept of Deep Learning (DL). The popularity of such techniques largely stems from their automated feature engineering capabilities, which aid in modeling software artifacts. However, due to the rapid pace at which DL techniques have been adopted, it is difficult to distill the current successes, failures, and opportunities of the current research landscape. In an effort to bring clarity to this cross-cutting area of work, from its modern inception to the present, this article presents a systematic literature review of research at the intersection of SE &amp; DL. The review canvasses work appearing in the most prominent SE and DL conferences and journals and spans 128 papers across 23&nbsp;unique SE tasks. We center our analysis around the components of learning, a set of principles that governs the application of machine learning techniques (ML) to a given problem domain, discussing several aspects of the surveyed work at a granular level. The end result of our analysis is a research roadmap that both delineates the foundations of DL techniques applied to SE research and highlights likely areas of fertile exploration for the future.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {mar},
articleno = {32},
numpages = {58},
keywords = {literature review, Deep learning, neural networks, machine learning, software engineering}
}

@article{10.1145/3442181,
author = {Sabir, Bushra and Ullah, Faheem and Babar, M. Ali and Gaire, Raj},
title = {Machine Learning for Detecting Data Exfiltration: A Review},
year = {2021},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {3},
issn = {0360-0300},
url = {https://doi.org/10.1145/3442181},
doi = {10.1145/3442181},
abstract = {Context: Research at the intersection of cybersecurity, Machine Learning (ML), and Software Engineering (SE) has recently taken significant steps in proposing countermeasures for detecting sophisticated data exfiltration attacks. It is important to systematically review and synthesize the ML-based data exfiltration countermeasures for building a body of knowledge on this important topic. Objective: This article aims at systematically reviewing ML-based data exfiltration countermeasures to identify and classify ML approaches, feature engineering techniques, evaluation datasets, and performance metrics used for these countermeasures. This review also aims at identifying gaps in research on ML-based data exfiltration countermeasures. Method: We used Systematic Literature Review (SLR) method to select and review 92 papers. Results: The review has enabled us to: (a) classify the ML approaches used in the countermeasures into data-driven, and behavior-driven approaches; (b) categorize features into six types: behavioral, content-based, statistical, syntactical, spatial, and temporal; (c) classify the evaluation datasets into simulated, synthesized, and real datasets; and (d) identify 11 performance measures used by these studies. Conclusion: We conclude that: (i) The integration of data-driven and behavior-driven approaches should be explored; (ii) There is a need of developing high quality and large size evaluation datasets; (iii) Incremental ML model training should be incorporated in countermeasures; (iv) Resilience to adversarial learning should be considered and explored during the development of countermeasures to avoid poisoning attacks; and (v) The use of automated feature engineering should be encouraged for efficiently detecting data exfiltration attacks.},
journal = {ACM Comput. Surv.},
month = {may},
articleno = {50},
numpages = {47},
keywords = {advanced persistent threat, data leakage, machine learning, Data exfiltration, data breach}
}

@inproceedings{10.1145/3457784.3457803,
author = {Ferdinansyah, Alex and Purwandari, Betty},
title = {Challenges in Combining Agile Development and CMMI: A Systematic Literature Review},
year = {2021},
isbn = {9781450388825},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3457784.3457803},
doi = {10.1145/3457784.3457803},
abstract = {Recently, Agile Development has emerged as an alternative approach in software engineering. The Agile Software Development (ASD) process provides the ability to cope with ever-changing requirements. On the other hand, the Capability Maturity Model Integration, one of the Software Process Improvement Framework, is widely used to provide software development organizations with structure and stability in their software process. It enables organizations to generate software processes with better quality software, the productivity increase of the development team, and minimal risk of failure. The idea behind combining the Capability Maturity Model Integration (CMMI) and Agile aims to create a software development procedure that is stable and continues to improve while also providing agility for dealing with dynamic business needs. This research compiles the experiences of combining both software and identifies challenges for the collaborative implementation process. This study also highlights the extent of the compatibility of CMMI and Agile Development. This research followed a standardized Systematic Literature Review procedure and used the approach known as Preferred Reporting Items for Systematic Reviews and Meta-Analyses or PRISMA. The findings indicate that the main challenges with regard to combining CMMI and Agile are the lack of relevant knowledge and experience and the culture of CMMI, Agile, or sometimes both. The limited scope of Agile itself poses another considerable challenge. Agile focuses on software development projects, while CMMI has a broader range, from project-level development to organization-level process improvement. This review also finds that Agile Development is compatible with CMMI at a maturity level of 2 and 3. Future studies should determine the optimal method for overcoming the obstacles associated with combining CMMI and Agile.},
booktitle = {2021 10th International Conference on Software and Computer Applications},
pages = {63–69},
numpages = {7},
keywords = {PRISMA, Agile, CMMI, Software Process Improvement, Scrum, Systematic Literature Review, Extreme Programming},
location = {Kuala Lumpur, Malaysia},
series = {ICSCA 2021}
}

@inproceedings{10.1145/3555228.3555272,
author = {Neto, Alvaro Magnum Barbosa and Carvalho, Emmanuel and Bandeira, Marc\'{\i}Lio},
title = {MO-DM Tool: Improving Teams’ Engagement with Motivation-Oriented Decision-Making},
year = {2022},
isbn = {9781450397353},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3555228.3555272},
doi = {10.1145/3555228.3555272},
abstract = {A significant part of Software Engineering students’ academic and professional life involves working on projects in collaboration with their peers. They will form teams and perform on many software-related projects. Studies based on a systematic literature review and experimental results in a multidisciplinary tech-based innovation course with undergraduate students from Computer Engineering and Computer Science indicate difficulties in two significant activities in collaborative work: decision-making and reaching consensus. These recurrent difficulties negatively affect learners’ motivation and engagement throughout the project’s life cycle, besides other losses. This article aims to present a tool based on a model called MO-DM (Motivation-Oriented Decision-Making) proposed in doctoral research to address these hardships. It enables a new project view of members’ motivation and engagement, considering all the choices made along the project journey. The tool is grounded on EVC (Expectancy-Value-Cost) model, using it in a new way. Decisions like ”What programming language should we use?” are observed from the perspective of ”Which programming language can bring more engagement and motivation to the majority of the team?”. This view makes it possible to identify which students are more susceptible to being demotivated and disengaged in each step, and actions can be performed to mitigate these effects. Teams can make more engaging and motivating choices by picking the ones that will positively affect most of the group, enhancing the chances of successful projects. MO-DM tool is under preliminary tests with satisfactory results. Many decision-making situations where motivation and engagement are concerns can benefit from MO-DM. Tool presentation video link here.},
booktitle = {Proceedings of the XXXVI Brazilian Symposium on Software Engineering},
pages = {88–94},
numpages = {7},
keywords = {Motivation, Engagement, Expectancy-Value-Cost, Teams, Collaboration, Motivation-Oriented Decision-Making, Decision-Making, Projects, EVC, MO-DM},
location = {Virtual Event, Brazil},
series = {SBES '22}
}

@article{10.1145/3477535,
author = {Liu, Chao and Gao, Cuiyun and Xia, Xin and Lo, David and Grundy, John and Yang, Xiaohu},
title = {On the Reproducibility and Replicability of Deep Learning in Software Engineering},
year = {2021},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {1},
issn = {1049-331X},
url = {https://doi.org/10.1145/3477535},
doi = {10.1145/3477535},
abstract = {Context: Deep learning (DL) techniques have gained significant popularity among software engineering (SE) researchers in recent years. This is because they can often solve many SE challenges without enormous manual feature engineering effort and complex domain knowledge.Objective: Although many DL studies have reported substantial advantages over other state-of-the-art models on effectiveness, they often ignore two factors: (1) reproducibility—whether the reported experimental results can be obtained by other researchers using authors’ artifacts (i.e., source code and datasets) with the same experimental setup; and (2) replicability—whether the reported experimental result can be obtained by other researchers using their re-implemented artifacts with a different experimental setup. We observed that DL studies commonly overlook these two factors and declare them as minor threats or leave them for future work. This is mainly due to high model complexity with many manually set parameters and the time-consuming optimization process, unlike classical supervised machine learning (ML) methods (e.g., random forest). This study aims to investigate the urgency and importance of reproducibility and replicability for DL studies on SE tasks.Method: In this study, we conducted a literature review on 147 DL studies recently published in 20 SE venues and 20 AI (Artificial Intelligence) venues to investigate these issues. We also re-ran four representative DL models in SE to investigate important factors that may strongly affect the reproducibility and replicability of a study.Results: Our statistics show the urgency of investigating these two factors in SE, where only 10.2% of the studies investigate any research question to show that their models can address at least one issue of replicability and/or reproducibility. More than 62.6% of the studies do not even share high-quality source code or complete data to support the reproducibility of their complex models. Meanwhile, our experimental results show the importance of reproducibility and replicability, where the reported performance of a DL model could not be reproduced for an unstable optimization process. Replicability could be substantially compromised if the model training is not convergent, or if performance is sensitive to the size of vocabulary and testing data.Conclusion: It is urgent for the SE community to provide a long-lasting link to a high-quality reproduction package, enhance DL-based solution stability and convergence, and avoid performance sensitivity on different sampled data.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {oct},
articleno = {15},
numpages = {46},
keywords = {Deep learning, replicability, reproducibility, software engineering}
}

@article{10.1145/3444689,
author = {Zhao, Liping and Alhoshan, Waad and Ferrari, Alessio and Letsholo, Keletso J. and Ajagbe, Muideen A. and Chioasca, Erol-Valeriu and Batista-Navarro, Riza T.},
title = {Natural Language Processing for Requirements Engineering: A Systematic Mapping Study},
year = {2021},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {3},
issn = {0360-0300},
url = {https://doi.org/10.1145/3444689},
doi = {10.1145/3444689},
abstract = {Natural Language Processing for Requirements Engineering (NLP4RE) is an area of research and development that seeks to apply natural language processing (NLP) techniques, tools, and resources to the requirements engineering (RE) process, to support human analysts to carry out various linguistic analysis tasks on textual requirements documents, such as detecting language issues, identifying key domain concepts, and establishing requirements traceability links. This article reports on a mapping study that surveys the landscape of NLP4RE research to provide a holistic understanding of the field. Following the guidance of systematic review, the mapping study is directed by five research questions, cutting across five aspects of NLP4RE research, concerning the state of the literature, the state of empirical research, the research focus, the state of tool development, and the usage of NLP technologies. Our main results are as follows: (i) we identify a total of 404 primary studies relevant to NLP4RE, which were published over the past 36 years and from 170 different venues; (ii) most of these studies (67.08%) are solution proposals, assessed by a laboratory experiment or an example application, while only a small percentage (7%) are assessed in industrial settings; (iii) a large proportion of the studies (42.70%) focus on the requirements analysis phase, with quality defect detection as their central task and requirements specification as their commonly processed document type; (iv) 130 NLP4RE tools (i.e., RE specific NLP tools) are extracted from these studies, but only 17 of them (13.08%) are available for download; (v) 231 different NLP technologies are also identified, comprising 140 NLP techniques, 66 NLP tools, and 25 NLP resources, but most of them—particularly those novel NLP techniques and specialized tools—are used infrequently; by contrast, commonly used NLP technologies are traditional analysis techniques (e.g., POS tagging and tokenization), general-purpose tools (e.g., Stanford CoreNLP and GATE) and generic language lexicons (WordNet and British National Corpus). The mapping study not only provides a collection of the literature in NLP4RE but also, more importantly, establishes a structure to frame the existing literature&nbsp;through categorization, synthesis and conceptualization of the main theoretical concepts and relationships that encompass&nbsp;both RE and NLP aspects. Our work thus produces a conceptual framework of NLP4RE. The framework is used to identify research gaps and directions, highlight technology transfer needs, and encourage more synergies between the RE community, the NLP one, and the software&nbsp;and systems&nbsp;practitioners. Our results can be used as a starting point to frame future studies according to a well-defined terminology and can be expanded as new technologies and novel solutions emerge.},
journal = {ACM Comput. Surv.},
month = {apr},
articleno = {55},
numpages = {41},
keywords = {natural language processing (NLP), Requirements engineering (RE), software engineering (SE), systematic review, systematic mapping study}
}

@article{10.1145/3487043,
author = {Mart\'{\i}nez-Fern\'{a}ndez, Silverio and Bogner, Justus and Franch, Xavier and Oriol, Marc and Siebert, Julien and Trendowicz, Adam and Vollmer, Anna Maria and Wagner, Stefan},
title = {Software Engineering for AI-Based Systems: A Survey},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3487043},
doi = {10.1145/3487043},
abstract = {AI-based systems are software systems with functionalities enabled by at least one AI component (e.g., for image-, speech-recognition, and autonomous driving). AI-based systems are becoming pervasive in society due to advances in AI. However, there is limited synthesized knowledge on Software Engineering (SE) approaches for building, operating, and maintaining AI-based systems. To collect and analyze state-of-the-art knowledge about SE for AI-based systems, we conducted a systematic mapping study. We considered 248 studies published between January 2010 and March 2020. SE for AI-based systems is an emerging research area, where more than 2/3 of the studies have been published since 2018. The most studied properties of AI-based systems are dependability and safety. We identified multiple SE approaches for AI-based systems, which we classified according to the SWEBOK areas. Studies related to software testing and software quality are very prevalent, while areas like software maintenance seem neglected. Data-related issues are the most recurrent challenges. Our results are valuable for: researchers, to quickly understand the state-of-the-art and learn which topics need more research; practitioners, to learn about the approaches and challenges that SE entails for AI-based systems; and, educators, to bridge the gap among SE and AI in their curricula.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {apr},
articleno = {37e},
numpages = {59},
keywords = {artificial intelligence, systematic mapping study, AI-based systems, Software engineering}
}

@inproceedings{10.1145/3474624.3474649,
author = {Falc\~{a}o, Larissa and Soares, Sergio},
title = {Human-Oriented Software Engineering Experiments: The Large Gap in Experiment Reports},
year = {2021},
isbn = {9781450390613},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3474624.3474649},
doi = {10.1145/3474624.3474649},
abstract = {Context: The lack of information in experiment reports impairs external replications and decreases experiment quality and reliability, causing a lack of knowledge dissemination and making it impossible to confirm the results, despite the existence of well-known guidelines for planning, conducting, and reporting experiments. Objective: Provide an in-depth study on how information from human-oriented controlled experiments in software engineering is reported after the emergence of supporting guidelines. Method: A systematic mapping study was conducted in the main empirical software engineering and software engineering venues, considering the period following the supporting guidelines publication. Results: We analyzed 412 articles from three conferences and three journals reporting experiments where we did not find crucial information about the experiments in most of them. Examples of such information are participant reward, target population, hypothesis, and conclusion and construct validity. Conclusion: There is a gap between the information the guidelines suggest reporting and what is reported. From 27 elements that should be on the reports, according to the guidelines, 65% of the analyzed articles failed to report at least 13 (almost half). Such finding opposes the natural intuition that with the appearance and maturation of guidelines, studies’ reports would increasingly comply with them over the years. As a consequence, a flawed report may raise doubts about the quality and validity of the study.},
booktitle = {Proceedings of the XXXV Brazilian Symposium on Software Engineering},
pages = {330–334},
numpages = {5},
keywords = {Experiment Report, Empirical Software Engineering, Controlled Experiments, Systematic Mapping Study},
location = {Joinville, Brazil},
series = {SBES '21}
}

@inproceedings{10.1145/3530019.3531336,
author = {Khan, Rafiq Ahmad and Khan, Siffat Ullah and Ilyas, Muhammad},
title = {Exploring Security Procedures in Secure Software Engineering: A Systematic Mapping Study},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3531336},
doi = {10.1145/3530019.3531336},
abstract = {Various new technologies have developed as software security solutions have become more critical. One of the essential parts of software quality is the product's security. Though providing examples covering all phases of secure software development is necessary, very few of these situations have been documented. More than a few approaches have been proposed and implemented to handle software security, but only a few of them provide valid evidence for developing secure software applications. This paper presents the results of a Systematic Mapping Study (SMS), which was carried out to determine the existence of software security metrics, tools, standards, and security-related research topics mainly discussed and addressed. A total of 116 studies were chosen for inclusion in this review. Selected studies led us to discover 55 Secure Software Engineering (SSE) metrics, 68 SSE tools, 33 SSE standards, and 12 SSE research topics that have been discussed and addressed. This effort will aid software development firms in better understanding existing security measures employed in creating secure software. It can also serve as a foundation for researchers to build and create new software security solutions and identify new research directions.},
booktitle = {Proceedings of the International Conference on Evaluation and Assessment in Software Engineering 2022},
pages = {433–439},
numpages = {7},
keywords = {Software Security, Secure Software Development, Systematic Mapping Study, Secure Software Engineering},
location = {Gothenburg, Sweden},
series = {EASE '22}
}

@article{10.1145/3485275,
author = {Watson, Cody and Cooper, Nathan and Palacio, David Nader and Moran, Kevin and Poshyvanyk, Denys},
title = {A Systematic Literature Review on the Use of Deep Learning in Software Engineering Research},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3485275},
doi = {10.1145/3485275},
abstract = {An increasingly popular set of techniques adopted by software engineering (SE) researchers to automate development tasks are those rooted in the concept of Deep Learning (DL). The popularity of such techniques largely stems from their automated feature engineering capabilities, which aid in modeling software artifacts. However, due to the rapid pace at which DL techniques have been adopted, it is difficult to distill the current successes, failures, and opportunities of the current research landscape. In an effort to bring clarity to this cross-cutting area of work, from its modern inception to the present, this article presents a systematic literature review of research at the intersection of SE &amp; DL. The review canvasses work appearing in the most prominent SE and DL conferences and journals and spans 128 papers across 23&nbsp;unique SE tasks. We center our analysis around the components of learning, a set of principles that governs the application of machine learning techniques (ML) to a given problem domain, discussing several aspects of the surveyed work at a granular level. The end result of our analysis is a research roadmap that both delineates the foundations of DL techniques applied to SE research and highlights likely areas of fertile exploration for the future.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {mar},
articleno = {32},
numpages = {58},
keywords = {Deep learning, neural networks, literature review, machine learning, software engineering}
}

@inproceedings{10.1145/3493244.3493249,
author = {Carvalho, Luiz Paulo and Suzano, Jos\'{e} Antonio and Anastassiu, Monica and Santoro, Fl\'{a}via Maria and Oliveira, Jonice and Gon\c{c}alves, Jo\~{a}o Carlos},
title = {Ethics: What is the Research Scenario in the Brazilian Symposium SBQS?},
year = {2021},
isbn = {9781450395533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3493244.3493249},
doi = {10.1145/3493244.3493249},
abstract = {Many practitioners and researchers still consider software as program code, composed by algorithms and associated documentation, written in a programming language, and finally compiled or interpreted in a computational environment. The different facets of the software question, explored in interdisciplinary fields such as Digital Humanities, seem largely unexplored in Software Engineering and other traditional Computing fields of research. This paper aims to present an overview of ethical aspects through the publications of the Brazilian Symposium on Software Quality (SBQS). We followed a Systematic Literature Review (SLR) approach and presented quantitative and qualitative, and in-depth results, analyzing fifteen editions of the SBQS between 2006 and 2020. We adopted the concept of Ethics in a primary way, through searches for terms directly associated, and secondary, by terms such as Informed Consent, aligned with the definitions and concepts of Computational Ethics combined with episteme and good practices in Software Engineering. The results pointed to the minor occurrence of ethical aspects in SBQS publications, growing timidly over the years. We conclude that there is broad space to explore the theme of Computational Ethics combined with Software Quality.},
booktitle = {XX Brazilian Symposium on Software Quality},
articleno = {5},
numpages = {10},
keywords = {SBQS, Software Engineering, Software Quality, Systematic Literature Review, Ethics},
location = {Virtual Event, Brazil},
series = {SBQS '21}
}

@article{10.1145/3450288,
author = {Lo, Sin Kit and Lu, Qinghua and Wang, Chen and Paik, Hye-Young and Zhu, Liming},
title = {A Systematic Literature Review on Federated Machine Learning: From a Software Engineering Perspective},
year = {2021},
issue_date = {June 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3450288},
doi = {10.1145/3450288},
abstract = {Federated learning is an emerging machine learning paradigm where clients train models locally and formulate a global model based on the local model updates. To identify the state-of-the-art in federated learning and explore how to develop federated learning systems, we perform a systematic literature review from a software engineering perspective, based on 231 primary studies. Our data synthesis covers the lifecycle of federated learning system development that includes background understanding, requirement analysis, architecture design, implementation, and evaluation. We highlight and summarise the findings from the results and identify future trends to encourage researchers to advance their current work.},
journal = {ACM Comput. Surv.},
month = {may},
articleno = {95},
numpages = {39},
keywords = {edge learning, privacy, software engineering, systematic literature review, Federated learning, distributed learning}
}

@inproceedings{10.1145/3535511.3535532,
author = {Candria, Denise de Campos and Araujo, Renata Mendes de},
title = {Crowdsourcing Software Development - a Possible Path?},
year = {2022},
isbn = {9781450396981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3535511.3535532},
doi = {10.1145/3535511.3535532},
abstract = {Context: Crowdsourcing software development (CSSD) is a form of collective intelligence that is gaining attention in the Information Technology industry as a work alternative for software projects. CSSD represents a paradigm shift in the in-house development approach, promising deliveries with quality, productivity and innovation. Problem: CSSD is an emerging approach, both in research and in practice. Despite the existence of commercial supporting platforms, organizations of different sizes still face the challenge of how to organize the collective work, and a clear definition of how to perform CSSD is not known yet. Solution: This article presents an analysis of the literature to identify the main processes, practices, tools and platforms used in CSSD initiatives, and to understand the benefits and challenges reported in these initiatives as well. IS theory: Not applicable. Method: Descriptive research based on systematic literature mapping. Summary of Results: CSSD is understood as a democratic alternative with great potential for improving quality, productivity and innovation in software projects. However, challenges for its realization are many and of different kinds (technical, managerial, methodological and legal). Results also show not a large amount of CSSD case study reports in real situations. Contributions and Impact on the IS area: This work provides an overview of CSSD application, as well as a critical analysis of its advantages and challenges, contributing with discussions to the challenge of Information Systems and the Open World. This overview enables reflection on the adoption of CSSD, stimulating the research of solutions under development by crowds for companies of different sizes.},
booktitle = {XVIII Brazilian Symposium on Information Systems},
articleno = {21},
numpages = {8},
keywords = {crowdsourcing, systematic mapping., crowd development, software engineering, software development, crowd sourcing},
location = {Curitiba, Brazil},
series = {SBSI}
}

@inproceedings{10.1145/3463274.3463328,
author = {Obaidi, Martin and Kl\"{u}nder, Jil},
title = {Development and Application of Sentiment Analysis Tools in Software Engineering: A Systematic Literature Review},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463328},
doi = {10.1145/3463274.3463328},
abstract = {Software development is a collaborative task and, hence, involves different persons. Research has shown the relevance of social aspects in the development team for a successful and satisfying project closure. Especially the mood of a team has been proven to be of particular importance. Thus, project managers or project leaders want to be aware of situations in which negative mood is present to allow for interventions. So-called sentiment analysis tools offer a way to determine the mood based on text-based communication. In this paper, we present the results of a systematic literature review of sentiment analysis tools developed for or applied in the context of software engineering. Our results summarize insights from 80 papers with respect to (1) the application domain, (2) the purpose, (3) the used data sets, (4) the approaches for developing sentiment analysis tools and (5) the difficulties researchers face when applying sentiment analysis in the context of software projects. According to our results, sentiment analysis is frequently applied to open-source software projects, and most tools are based on support-vector machines. Despite the frequent use of sentiment analysis in software engineering, there are open issues, e.g., regarding the identification of irony or sarcasm, pointing to future research directions.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {80–89},
numpages = {10},
keywords = {Machine Learning, Systematic Literature Review, Sentiment Analysis, Social Software Engineering},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@inproceedings{10.1145/3475716.3475777,
author = {Kamei, Fernando and Pinto, Gustavo and Wiese, Igor and Ribeiro, M\'{a}rcio and Soares, S\'{e}rgio},
title = {What Evidence We Would Miss If We Do Not Use Grey Literature?},
year = {2021},
isbn = {9781450386654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475716.3475777},
doi = {10.1145/3475716.3475777},
abstract = {Context: Multivocal Literature Reviews (MLR) search for evidence in both Traditional Literature (TL) and Grey Literature (GL). Despite the growing interest in MLR-based studies, the literature assessing how GL has contributed to MLR studies is still scarce. Objective: This research aims to assess how the use of GL contributed to MLR studies. By contributing, we mean, understanding to what extent GL is providing evidence that is indeed used by an MLR to answer its research question. Method: We start by conducting a tertiary study to identify MLR studies published between 2017 and 2019, selecting nine of them. We then identified the GL used in these studies and assessed to what extent the GLs are providing evidence that help these studies to answer their research questions. Results: Our analysis identified that 1) GL provided evidence not found in TL, 2) most of the GL sources were used to provide recommendations to solve problems, explain a topic, and classify the findings, and 3) 19 different GL types were used in the studies; these GLs were mainly produced by SE practitioners (including blog posts, slides presentations, or project descriptions). Conclusions: We evidence how GL contributed to MLR studies. We observed that if these GLs were not included in the MLR, several findings would have been omitted or weakened. We also described the challenges involved when conducting this investigation, along with potential ways to deal with them, which may help future SE researchers.},
booktitle = {Proceedings of the 15th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
articleno = {24},
numpages = {11},
keywords = {MLR, Grey Literature, GL, Empirical Software Engineering, Multivocal Literature Review},
location = {Bari, Italy},
series = {ESEM '21}
}

